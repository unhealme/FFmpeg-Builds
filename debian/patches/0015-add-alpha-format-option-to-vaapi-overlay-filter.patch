Index: FFmpeg/libavfilter/vf_overlay_vaapi.c
===================================================================
--- FFmpeg.orig/libavfilter/vf_overlay_vaapi.c
+++ FFmpeg/libavfilter/vf_overlay_vaapi.c
@@ -53,6 +53,7 @@ typedef struct OverlayVAAPIContext {
     int              ow;
     int              oh;
     float            alpha;
+    int              alpha_format;
     unsigned int     blend_flags;
     float            blend_alpha;
 } OverlayVAAPIContext;
@@ -289,6 +290,7 @@ static int overlay_vaapi_config_input_ma
 static int overlay_vaapi_config_input_overlay(AVFilterLink *inlink)
 {
     AVFilterContext  *avctx  = inlink->dst;
+    AVFilterLink    *inlink0 = avctx->inputs[0];
     OverlayVAAPIContext *ctx = avctx->priv;
     int ret;
 
@@ -312,7 +314,11 @@ static int overlay_vaapi_config_input_ov
         ctx->blend_alpha  = ctx->alpha;
     }
 
-    if (have_alpha_planar(inlink))
+    // VA_BLEND_PREMULTIPLIED_ALPHA requires both inputs
+    // have alpha planar, otherwise it just fails.
+    if (have_alpha_planar(inlink) &&
+        have_alpha_planar(inlink0) &&
+        ctx->alpha_format == 1)
         ctx->blend_flags |= VA_BLEND_PREMULTIPLIED_ALPHA;
 
     return 0;
@@ -380,6 +386,9 @@ static const AVOption overlay_vaapi_opti
     { "w", "Overlay width",      OFFSET(overlay_ow),   AV_OPT_TYPE_STRING, { .str="overlay_iw"}, 0, 255, .flags = FLAGS},
     { "h", "Overlay height",     OFFSET(overlay_oh),   AV_OPT_TYPE_STRING, { .str="overlay_ih*w/overlay_iw"}, 0, 255, .flags = FLAGS},
     { "alpha", "Overlay global alpha", OFFSET(alpha),  AV_OPT_TYPE_FLOAT,  { .dbl = 1.0 }, 0.0, 1.0,      .flags = FLAGS },
+    { "alpha_format", "alpha format", OFFSET(alpha_format), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, 1, FLAGS, .unit = "alpha_format" },
+        { "straight",      "The overlay input is unpremultiplied", 0, AV_OPT_TYPE_CONST, { .i64 = 0 }, .flags = FLAGS, .unit = "alpha_format" },
+        { "premultiplied", "The overlay input is premultiplied",   0, AV_OPT_TYPE_CONST, { .i64 = 1 }, .flags = FLAGS, .unit = "alpha_format" },
     { "eof_action", "Action to take when encountering EOF from secondary input ",
         OFFSET(fs.opt_eof_action), AV_OPT_TYPE_INT, { .i64 = EOF_ACTION_REPEAT },
         EOF_ACTION_REPEAT, EOF_ACTION_PASS, .flags = FLAGS, .unit = "eof_action" },
